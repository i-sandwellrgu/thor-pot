import socket
import datetime
import paramiko
import os
import signal
import logging

# Change the server name here
HOST = '0.0.0.0'  # Listen on all available interfaces
PORT = 22  # SSH port

# Initialize logging
log_file_name = f"ssh_logs_{datetime.datetime.now().strftime('%Y-%m-%d')}.txt"
logging.basicConfig(filename=log_file_name, level=logging.INFO, format='%(asctime)s: %(message)s')

# Variable to control server termination
terminate_server = False

# Function to handle SSH connections
def handle_ssh(client):
    transport = paramiko.Transport(client)
    transport.add_server_key(paramiko.RSAKey.generate(2048))

    # Implementing a custom SSH server that doesn't send any banner
    class NoBannerSSHServer(paramiko.ServerInterface):
        def get_banner(self):
            return '', ''  # Empty banner and language

    server = NoBannerSSHServer()
    transport.start_server(server=server)

    # Accepting the SSH session
    channel = transport.accept(20)
    if channel is None:
        logging.error('SSH connection timed out')
        transport.close()
        return

    # Collecting client's username
    username = transport.get_username()
    logging.info(f'Connection from: {client.getpeername()}, Username: {username}')

    # Waiting for the client's password
    try:
        # Send a request for password
        channel.send('\nPlease enter your password: ')

        # Receive password from client
        password = channel.recv(1024).decode().strip()
        logging.info(f'Password received: {password}')

        # Log connection details
        connection_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_connection(client.getpeername()[0], username, password, connection_time)

        # Close SSH session
        channel.close()
    finally:
        transport.close()

# Signal handler for terminating the server
def signal_handler(sig, frame):
    global terminate_server
    logging.info("Received signal: %s", sig)
    logging.info("Terminating server...")
    terminate_server = True

# Register signal handler for SIGINT (Ctrl+C)
signal.signal(signal.SIGINT, signal_handler)

# Function to log connection details
def log_connection(client_address, username, password, connection_time):
    # Log connection details including timestamp, IP address, username, password, and connection time
    try:
        with open(log_file_name, "a") as logfile:
            logfile.write(f"{connection_time}: Connection from {client_address}, Username: {username}, Password: {password}\n")
    except Exception as e:
        logging.error("Error writing to log file: %s", e)

# Create a TCP socket and start listening
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as listen_socket:
    listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    listen_socket.bind((HOST, PORT))
    listen_socket.listen(5)  # Allow up to 5 pending connections

    logging.info("Serving on port: %s", PORT)

    # Set a timeout for accepting connections
    listen_socket.settimeout(1)  # 1 second timeout

    while not terminate_server:
        try:
            client_connection, client_address = listen_socket.accept()
            logging.info("Connection from: %s", client_address)
            handle_ssh(client_connection)
        except socket.timeout:
            # Timeout occurred, continue listening
            logging.error("Timeout occurred while waiting for connections.")

    # Close the listening socket
    listen_socket.close()

logging.info("Server stopped.")
